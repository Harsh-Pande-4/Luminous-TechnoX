import React, { useState, useEffect } from 'react';
import { Line } from 'react-chartjs-2';
import './App.css';

const dummyData = {
  dates: ['2024-10-20', '2024-10-21', '2024-10-22'],
  times: ['00:00', '06:00', '12:00', '18:00', '23:59'],
  consumption: [50, 70, 40, 80, 60],
  cost: [10, 15, 7, 20, 12],
  batteryCapacity: [100, 90, 80, 70, 60],
  powerGenerated: [20, 25, 15, 30, 25],
  appliances: [
    { name: 'Air Conditioner', consumption: 200 },
    { name: 'Refrigerator', consumption: 150 },
    { name: 'Washing Machine', consumption: 100 },
    { name: 'Television', consumption: 80 },
  ],
};

const App = () => {
  const [data, setData] = useState({
    labels: dummyData.times,
    datasets: [],
  });
  const [selectedDate, setSelectedDate] = useState('2024-10-20');
  const [selectedAppliance, setSelectedAppliance] = useState('');
  const [reminderMessage, setReminderMessage] = useState('');

  const fetchData = () => {
    const filteredConsumption = dummyData.consumption;
    const filteredCost = dummyData.cost;
    const filteredBatteryCapacity = dummyData.batteryCapacity;
    const filteredPowerGenerated = dummyData.powerGenerated;

    setData({
      labels: dummyData.times,
      datasets: [
        {
          label: 'Consumption (kWh)',
          data: filteredConsumption,
          borderColor: '#1E90FF',
          backgroundColor: 'rgba(30, 144, 255, 0.5)',
          fill: true,
          tension: 0.4,
        },
        {
          label: 'Cost ($)',
          data: filteredCost,
          borderColor: '#4682B4',
          backgroundColor: 'rgba(70, 130, 180, 0.5)',
          fill: true,
          tension: 0.4,
        },
        {
          label: 'Battery Capacity (kWh)',
          data: filteredBatteryCapacity,
          borderColor: '#32CD32',
          backgroundColor: 'rgba(50, 205, 50, 0.5)',
          fill: true,
          tension: 0.4,
        },
        {
          label: 'Power Generated (kWh)',
          data: filteredPowerGenerated,
          borderColor: '#FFD700',
          backgroundColor: 'rgba(255, 215, 0, 0.5)',
          fill: true,
          tension: 0.4,
        },
      ],
    });
  };

  const handleApplianceChange = (e) => {
    setSelectedAppliance(e.target.value);
    const appliance = dummyData.appliances.find(appliance => appliance.name === e.target.value);
    if (appliance) {
      const costPerUnit = 0.2; // Example cost per kWh
      const consumptionCost = appliance.consumption * costPerUnit;
      if (consumptionCost < 10) {
        setReminderMessage(`Reminder: Running ${appliance.name} is cost-effective now!`);
      } else {
        setReminderMessage('');
      }
    }
  };

  useEffect(() => {
    fetchData();
  }, [selectedDate]);

  return (
    <div className="App">
      <header>
        <h1>Luminous Electricity Tracker</h1>
        <p>Real-time electricity consumption and cost tracking</p>
      </header>
      <div className="controls">
        <label htmlFor="date">Select Date: </label>
        <select id="date" value={selectedDate} onChange={(e) => setSelectedDate(e.target.value)}>
          {dummyData.dates.map((date) => (
            <option key={date} value={date}>
              {date}
            </option>
          ))}
        </select>
      </div>
      <div className="appliance-controls">
        <label htmlFor="appliance">Select Appliance: </label>
        <select id="appliance" value={selectedAppliance} onChange={handleApplianceChange}>
          <option value="">--Select an Appliance--</option>
          {dummyData.appliances.map((appliance) => (
            <option key={appliance.name} value={appliance.name}>
              {appliance.name}
            </option>
          ))}
        </select>
      </div>
      {reminderMessage && <div className="reminder">{reminderMessage}</div>}
      <div className="chart-container">
        <Line data={data} />
      </div>
    </div>
  );
};

export default App;


